#====================================================================
#  NeXus - Neutron & X-ray Common Data Format
#  
#  $Id: Makefile.am 961 2007-09-04 12:31:49Z Freddie Akeroyd $
#
#  Top level scons file for coordinating NeXus build
#  
#  Copyright (C) 2008 Freddie Akeroyd
#  
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
# 
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
# 
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free 
#  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
#  MA  02111-1307  USA
#             
#  For further information, see <http://www.nexusformat.org/>
#
######################## Subversion Reposity details ########################
# Repository Location     $HeadURL$
# Revision of last commit $LastChangedRevision$ 
# Date of last commit     $LastChangedDate$
# Author of last commit   $LastChangedBy$
############################################################################

import os
import platform
import sys
import shutil
import re
import os
import nexus_scons_utils

source_files = Split("""NeXusFile.cpp
                        NeXusException.cpp
                        NeXusStream.cpp""")

#Import environment
Import('env')
myenv = env.Clone()
myenv.Append(CPPPATH=['#include'])
myenv.Append(CPPDEFINES=[('IN_NEXUS_CPP_LIBRARY',1)])
myenv_static=myenv.Clone()
myenv_dynamic=myenv.Clone()


shared_objects = nexus_scons_utils.getSharedObjects(source_files, myenv)

#BUILD CODE
shared = myenv_dynamic.SharedLibrary('lib/NeXusCPP', source_files, LIBS=env['MYSHLIBLIST'], LIBPATH=env['MYSHLIBDIRLIST'], PDB='lib/NeXusCPP.pdb')
static = myenv_static.StaticLibrary('libstatic/NeXusCPP', source_files, LIBS=env['MYLIBLIST'], LIBPATH=env['MYLIBDIRLIST'], PDB='libstatic/NeXusCPP.pdb')
retval = { 'shared': shared, 'static': static, 'sharedobjs' : shared_objects, 'libs': [ 'NeXusCPP' ] }
Return('retval')
