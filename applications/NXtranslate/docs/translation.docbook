<!-- ******************** TRANSLATION-FILE ******************** -->
<chapter id="translation-file">
<title>The Translation File</title>

<para>The file produced by &nxtranslate is entirely determined by the
contents of the translation file. This chapter discusses the format of
a translation file as well as listing "location strings" for some of
the external formats.</para>

<sect1><title>Overview</title>

<para>Translation files are written in xml and read using an xml
parser. For this reason they must be a valid xml
file. <footnote><para>There are many places to find more information
about XML <ulink
url="http://www.w3.org/XML/"><citetitle>W3C</citetitle></ulink> is the
definitive standard while <ulink
url="http://studio.tellme.com/general/xmlprimer.html"><citetitle>Tellme
Studio</citetitle></ulink> has a one page overview of what XML
is.</para></footnote> This means that the following rules must be
adhered to

<itemizedlist>
<listitem><para>Every opening tag must have a corresponding closing
tag at the same level. This means that
<function><![CDATA[<entry><data></data></entry>]]></function> is
allowed while
<function><![CDATA[<entry><data></entry></data>]]></function> and
<function><![CDATA[<entry><data></data>]]></function> are
not.</para></listitem>
<listitem><para>Tags and attribute names are case sensitive. Therefore
<parameter><![CDATA[<entry>]]></parameter> and
<parameter><![CDATA[Entry]]></parameter> are distinct tags. While this
can lead to confusion when writing a translation file it is easily
avoided in practice.</para></listitem>
<listitem><para>Attribute values must be inside single or double
quotes ('' or "").</para></listitem>
<listitem><para>Tags and attribute names cannot start with a number or
special character. Another way of saying this is to always start the
name with an uppercase or lowercase letter.</para></listitem>
<listitem><para>Certain characters will break the parsing of the
xml. The characters, and how to create them are &lt
(<function><![CDATA[&lt]]></function>), &gt
(<function><![CDATA[&gt]]></function>), &amp
(<function><![CDATA[&amp]]></function>), &quot
(<function><![CDATA[&quot]]></function>), and &apos
(<function><![CDATA[&apos]]></function>).</para></listitem>
<listitem><para>Empty tags,
<function><![CDATA[<data></data>]]></function>, can be replaced with a
single tag, <function><![CDATA[<data/>]]></function>. This convenience
will make more sense during the discussion of translation files that
specify information outside of the file.</para></listitem>
</itemizedlist>
</para>

<para>There are some other rules to note about the translation
file. It is not simply a XML file, there are additional
constraints. However, the translation file is not directly validated
to follow these constraints, but failing to follow them will result in
the program exiting early without creating a NeXus file. Also,
NXtranslate is intended to be used to write any file readable by the
NeXus API, so the translation file is not validated against definition
files. <footnote><para>This decision was made on the basis of
performance since it was determined that most of the time a "standard"
translation file will be used to convert a large number of
files.</para></footnote> First some definitions
<variablelist><title>Translation file definitions</title>

<varlistentry><term>&napi</term><listitem><para>An abbreviation for the NeXus Abstract Program Interface.</para></listitem></varlistentry>

<varlistentry><term>node</term><listitem><para>A point in the
hierarchy, it can either contain other nodes (be a parent with
children) or not (a leaf node). Any pair of opening an closing tags
represents a single node.</para></listitem></varlistentry>

<varlistentry><term>group</term><listitem><para>A node that contains
other nodes.</para></listitem></varlistentry>

<varlistentry><term>field</term><listitem><para>A node that does not
contain other nodes (a leaf node). In other places in NeXus this is
sometimes refered to as a "data" or a
"SDS".</para></listitem></varlistentry>

<varlistentry><term><parameter>retriever</parameter></term><listitem><para>An
object whose job is to retrieve information from a source external to
the translation file. Which retriever is created is determined by the
value of &mime_type . The retriever is initialized using the value of
&source . Information is produced by the retriever using the &location
.</para></listitem></varlistentry>

<varlistentry><term>special attribute</term><listitem><para>An
attribute that is interpreted by &nxtranslate as a command to deal
with external files. The special attributes are &mime_type , &source ,
&location , and &make_link .</para></listitem></varlistentry>

<varlistentry><term>&mime_type</term><listitem><para>A keyword that
denotes what library to use to retrieve information from an external
source.</para></listitem></varlistentry>

<varlistentry><term>&source</term><listitem><para>A string denoting
what a retriever should use to initialize itself. In practice this is
a file on the local system for the retriever to
open. </para></listitem></varlistentry>

<varlistentry><term>&location</term><listitem><para>A string passed to
the retriever for it to generate data from. For example, when using
the NeXus retriever this is a path to a node in the file which will be
written out to the resulting NeXus
file.</para></listitem></varlistentry>

<varlistentry><term>&make_link</term><listitem><para>The node
containing this attribute will have all other information ignored,
instead a link from it to the location denoted by the attribute value
will be made. The syntax for describing location is the same as for
the <link linkend="nexus">NeXus
retriever</link>.</para></listitem></varlistentry>

<varlistentry><term>primative type</term><listitem><para>Any of the
following types (ignoring bit-length): <parameter>NX_UINT</parameter>
(unsigned integer), <parameter>NX_INT</parameter> (signed integer),
<parameter>NX_FLOAT</parameter> (floating point number),
<parameter>NX_CHAR</parameter> (character),
<parameter>NX_BOOLEAN</parameter> (boolean, or true/false),
<parameter>NX_BINARY</parameter> (binary value). At the moment
<parameter>NX_BOOLEAN</parameter> and <parameter>NX_BINARY</parameter>
are not supported by &nxtranslate .  </para></listitem></varlistentry>

</variablelist>
</para>

<para>Now that the definitions have been presented the other constraints of a translation file can be explained.
<itemizedlist>

<listitem><para>The root node in a file will be
<parameter><![CDATA[<NXroot>]]></parameter>. There will be nothing
pbefore or after it, and only one of them. The NXroot can be used to
set global values for &mime_type and &source .</para></listitem>

<listitem><para>Only groups can exist directly inside the
root. This is a constraint of the NeXus API.</para></listitem>

<listitem><para>Every node (except the <parameter>NXroot</parameter>)
needs a <parameter>name</parameter> and
<parameter>type</parameter>. If the node has a &location then the type
can be omitted since the retriever will provide it.</para></listitem>

<listitem><para>Groups cannot have any attribute other than the
special ones. Fields can have any attribute. This reflects a
restriction in the NeXus API and does not constrain the contents of
resulting NeXus files in any way.</para></listitem>

<listitem><para>Groups cannot have any data in them. In other words
things similar to <parameter><![CDATA[<data
type="NXdata">1,2,3,4</data>]]></parameter> are
incorrect.</para></listitem>

<listitem><para>To specify the dimensions of a field, use square
brackets [] affter the type. A single precision floating point array
with five elements would have
<parameter>type=NX_FLOAT32[5]</parameter>. If the field has only one
element, or is a character array, the dimensions can be left off. For
character arrays, the dimensions are ignored.</para></listitem>

</itemizedlist>
</para>


</sect1>

<sect1 id="simple_translation"><title>Simple Translation</title>

<para>While &nxtranslate is the anything to NeXus translator, it is
possible to have everything specfied in the translation file. <xref
linkend="simple_translation_xml"> shows a translation file where no
information will be taken from any other file.</para>

<example id="simple_translation_xml"><title>Simple translation file <filename>test_simple.xml</filename></title>
<programlisting role="XML" linenumbering="numbered">
<![CDATA[<NXroot>
  <entry1 type="NXentry">
    <note type="NXnote">
      <author type="NX_CHAR">George User</author>
      <type type="NX_CHAR">text/plain</type>
      <data type="NX_CHAR">The data is a simple parabola, f(x)=x^2</data>
    </note>
    <parabola_1D type="NXdata">
      <x type="NX_INT8[11]" axis="1" units="number">
            [0,1,2,3,4,5,6,7,8,9,10]</x>
      <f_x type="NX_INT16[11]" signal="1" units="number">
            0,1,4,9,16,25,36,49,64,81,100</f_x>
    </parabola_1D>
  </entry1>
  <entry2 type="NXentry">
    <note type="NXnote">
      <author type="NX_CHAR">George User</author>
      <type type="NX_CHAR">text/plain</type>
      <data type="NX_CHAR">
            The data is a two dimensional parabola, f(x,y)=x^2+y^2</data>
    </note>
    <parabola_2D type="NXdata">
      <x type="NX_FLOAT32[4]" axis="1" units="number">1.0,4.7,2.3,1.6</x>
      <y type="NX_FLOAT32[3]" axis="2" units="number">3.3,6.2,9.2</y>
      <f_x_y type="NX_FLOAT64[4,3]" signal="1" axes="x,y" units="number">
            [11.89,32.98,16.18][13.45,39.44,60.53]
            [43.73,41.00,85.64][106.73,89.93,87.20]</f_x_y>
    </parabola_2D>
  </entry2>
</NXroot>]]>
</programlisting>
</example>

<para>This example follows all of the rules laid out in the previous
section and serves to introduce several of the features of the
translation file. First a style note though, in XML files there is a
concept of "ignorable whitespace". These are carriage returns
(<![CDATA[\n]]>), line feeds (<![CDATA[\r]]>), tabs (<![CDATA[\t]]>),
and spaces. These are ignored (as suggested by the term "ignorable
whitespace") and are present to aid those looking at the raw XML to
see the node hierarchy.</para>

<para>The main purpose of <xref linkend="simple_translation_xml"> is
to show how to specify information in a translation file. Line 4
demonstrates the method for strings. Here the
<parameter>name</parameter> is <parameter>author</parameter> and the
<parameter>type</parameter> is <parameter>NX_CHAR</parameter>. The
length of the character array is determined from the actual string
supplied rather than what is specified in the
<parameter>type</parameter> attribute. The value is created by reading
in the supplied string, converting tabs, carriage returns, and line
feeds into a single space, turning any sections of multiple whitespace
into a single space, then chopping off any whitespace at both ends of
the string. This allows the person writting the file to add whitespace
in strings as needed to make the raw XML easier to read, without fear
of changing what is written into the final NeXus file.</para>

<para>Next to look at is how arrays of numbers are specified. For this
look at lines 24-27 to see both one and two dimensional arrays. The
dimension of the array is specified with the type as discussed above.
The thing to notice here is that arrays of numbers are specified as
comma delimited lists. The brackets in the list of values are
"syntatic sugar". When the values are read in &nxtranslate converts
them into commas then converts multiple adjacent commas into a single
comma. The purpose of this is so translation file authors can more
easily see each dimension of the array that they wrote. The brackets
can also be removed altogether as seen in line 24.</para>

</sect1>

<sect1 id="nexus_translation"><title>Translation from NeXus</title>

<para>Next is to show how to use NXtranslate to bring in information
from external sources. <xref linkend="nexus_translation_xml">
demonstrates various features of importing information from external
sources, including modifying it before writing.</para>

<example id="nexus_translation_xml"><title>Translation from NeXus file <filename>test_nexus.xml</filename></title>
<programlisting role="XML" linenumbering="numbered">
<![CDATA[<NXroot source="test_simple.nxs" mime_type="NeXus">
  <entry_1D location="/entry1"/>
  <entry_2D type="NXentry">
    <note location="/entry1/note">
       <description type="NX_CHAR">The functional form of the data
             </description>
    </note>
    <parabola_2D type="NXdata">
      <x axis="2" location="/entry2/parabola_2D/x"/>
      <y axis="1" location="/entry2/parabola_2D/y"/>
      <f_x_y type="NX_FLOAT64[3,4]" axes=""
            location="/entry2/parabola_2D/f_x_y"/>
    </parabola_2D>
  </entry_2D>
</NXroot>]]>
</programlisting>
</example>

<para>As suggested earlier the root node (line 1) has defined a
&source and &mime_type to use for creating a retriever. Line 2
demonstrates that entire entries can be copied from one file to the
next and that the name of a node can be changed. In this case it is
from <parameter>entry1</parameter> to
<parameter>entry_1D</parameter>. Lines 4-7 show how to copy over an
entire group and add a new field to it. For finer control of what is
added and have the ability to change attributes look at lines
9-12. Line 11 shows how to change the dimensions of the field by using
the <parameter>type</parameter> attribute. Please note that this will
not work for character arrays and the total number of array items must
remain constant. Also, the type itself cannot be changed (single
precision float to double precision float, etc.). Since the dimensions
of the <parameter>f_x_y</parameter> array change it makes sense to
change the axes for plotting. This is done in both line 9 and 10 by
specifying the attribute and its new value. To add another attribute
just specify it similarly. Line 11 demonstrates erasing the
<parameter>axes</parameter> attribute. Specify the attribute with an
empty string as the value.</para>

<para>These two examples have shown the way to set up a translation
file. You can import information from multiple files by declaring
another &source and &mime_type . There are a couple of things to know
about these as well. The default &mime_type is "NeXus" so it does not
need to be specified. For each &source , whatever &mime_type was
defined in the parent node will be used for the current &source
. <xref linkend="convoluted_translation_xml"> shows what, in
principle, could be done with &nxtranslate as more retrievers get
written.<footnote><para>While retrievers that import information from
mySQL and jpeg images would be nice, they do not currently
exist.</para></footnote> </para>

<example id="convoluted_translation_xml"><title>A contrived example</title>
<programlisting role="XML" linenumbering="numbered">
<![CDATA[<NXroot>
  <entry1  source="test_simple.nxs" location="/entry1">
    <user type="NXuser" source="127.0.0.1" mime_type="mySQL">
      <name type="NX_CHAR">George User</name>
      <address location="query(George User):address"/>
      <email location="query(George User):email"/>
      <phone location="query(George User):phone"/>
      <picture source="GeorgeUser.jpg" mime_type="img/jpeg" location="all"/>
    </user>
  </entry1>
  <entry2 source="test_nexus.nxs" location="/entry_2D"/>
</NXroot>]]>
</programlisting>
</example>

<sect2 id="links"><title>Anatomy of Links</title>

<para>The two nodes involved in a link are the source and link. The
source is the original version of the information, the link is the
copy. There is no way to decipher which is the original and which is
the copy without direct comparison of ids using the NeXus api. Links
can be either to a group or field. Links to attributes are not
supported by the &napi . A link to a group and field are both shown in
<xref linkend="two_links_xml">. The first link is to a group whose
name was <parameter>group1</parameter>, but will be named
<parameter>b</parameter> in the link. The second link is to a field,
its new name will be ignored. Looking at the contents of the resulting
NeXus file in this part of the hierarchy will show two items, one
called <parameter>a</parameter> and one called
<parameter>array1</parameter>.</para>

<example id="two_links_xml"><title>Two links</title>
<programlisting role="XML">
<![CDATA[<a make_link="/entry/group1"/>
<b make_link="/entry/group1/array1"/>]]>
</programlisting>
</example>

</sect2>
</sect1>

<sect1 id="translation-strings"><title>Strings for Translation</title>

<para>The previous section discussed how to write a translation file
and several of its features. This section will explain in more detail
the strings available for use in a translation file. In principle this
section is incomplete because there may exist retrievers that the
authors have not been informed of so consider this list
incomplete. Also, by nature, the retrievers are quite decouple so the
location strings for each retriever can be significantly different
from the others.</para>

<sect2 id="nexus"><title>NeXus</title>

<para>As seen earlier in this chapter the &mime_type for NeXus files
is <parameter>NeXus</parameter>. Similarly the &location strings are
as simple as possible. NeXus files are organized hierarchically
similar to the translation file. A good analogy is to compare it to a
file system where the groups are directories and the fields are
files. Using this analogy the &location strings are absolute paths to
the directory or file to be copied. Since there examples of NeXus
location strings in <xref linkend="nexus_translation_xml"> and <xref
linkend="convoluted_translation_xml"> there is only one other thing to
mention, the path separator is a forward slash, "/".

</para>

</sect2>

<sect2 id="ipns"><title>IPNS Runfile</title>

<para>The &mime_type for the IPNS retriever is
<parameter>IPNS</parameter>. Currently the IPNS retriever only provides access to a small portion of the runfile. The targets

<variablelist><title>IPNS retriever location strings</title>
<varlistentry><term>header.runTitle</term>
<listitem><para>A string for the title of the measurement.</para></listitem></varlistentry>
<varlistentry><term>header.userName</term>
<listitem><para>A string for the user name</para></listitem></varlistentry>
<varlistentry><term>header.startDateTime</term>
<listitem><para>A string for time of the start of the measurement.</para></listitem></varlistentry>
<varlistentry><term>header.endDateTime</term>
<listitem><para>A string for the time of the end of the measurement.</para></listitem></varlistentry>
</variablelist>

<!--
<table frame="all"><title>IPNS Retriever location strings</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead><row>
<entry>Location String</entry> <entry>Data</entry>
</row></thead>
<tbody>
<row>
<entry>header.runTitle</entry> <entry>A string for the title of the measurement.</entry>
</row>
<row>
<entry>header.userName</entry> <entry>A string for the user name</entry>
</row>
<row>
<entry>header.startDateTime</entry> <entry>A string for time of the start of the measurement.</entry>
</row>
<row>
<entry>header.endDateTime</entry> <entry>A string for the time of the end of the measurement.</entry>
</row>
</tbody>
</tgroup>
</table>
-->

</para>

</sect2>

</sect1>

</chapter>
