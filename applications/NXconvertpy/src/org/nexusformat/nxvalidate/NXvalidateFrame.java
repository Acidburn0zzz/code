/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NXvalidateFrame.java
 *
 * Created on 02-Jun-2010, 14:17:04
 */

package org.nexusformat.nxvalidate;

import java.awt.Cursor;
import java.awt.Dialog.ModalityType;
import java.awt.Insets;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 *
 * @author ser65
 */
public class NXvalidateFrame extends javax.swing.JFrame {

    private File nxsFile = null;
    private File nxdcFile = null;
    private DocumentBuilderFactory factory = null;
    DocumentBuilder builder = null;
    private NXReducedToTree domTree = null;
    NXNodeMapper root = null;
    NXvalidate validator = null;

    /** Creates new form NXvalidateFrame */
    public NXvalidateFrame() {
        initComponents();
        setup();
    }

    private void setup(){
        factory = DocumentBuilderFactory.newInstance();

        root = new NXNodeMapper("NXS Files");

        domTree = new NXReducedToTree(root);
        jTree1.setModel(domTree);
        try {
            builder = factory.newDocumentBuilder();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(
                    NXvalidateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFilesMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        validateSelectedMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jPanel2.setPreferredSize(new java.awt.Dimension(130, 130));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setContinuousLayout(true);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("NXS Files");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setViewportView(jTextPane1);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        openFilesMenuItem.setText("Open Files");
        openFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFilesMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openFilesMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        validateSelectedMenuItem.setText("Validate Selected");
        jMenu2.add(validateSelectedMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilesMenuItemActionPerformed

        if(evt.getSource() == openFilesMenuItem){

            NXLoadFilesDialog loadFile = new NXLoadFilesDialog(this, true);
            loadFile.setModalityType(ModalityType.APPLICATION_MODAL);
            loadFile.setVisible(true);
            nxsFile = loadFile.getNXSFile();
            nxdcFile = loadFile.getNXDCFile();

            if(nxsFile!=null && nxdcFile!=null){

                try {
                    //Reduce the file with NXConvert.
                    NXconvert convert = new NXconvert(nxsFile, true);
                    File reducedFile  = convert.convert();

                    //Display reduced file
                    Document document = builder.parse(reducedFile);
                    NXNodeMapper node = new NXNodeMapper(
                            document,true,nxsFile);
                    node.setSchematronFile(nxdcFile);
                    node.setRoot(root);
                    root.addNode(node);
                    domTree.updateTree();
                    
                } catch (InterruptedException ex) {
                    Logger.getLogger(
                            NXvalidateFrame.class.getName()).log(Level.SEVERE,
                            null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(
                            NXvalidateFrame.class.getName()).log(Level.SEVERE,
                            null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(
                            NXvalidateFrame.class.getName()).log(Level.SEVERE,
                            null, ex);
                } 

            }

        }

    }//GEN-LAST:event_openFilesMenuItemActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged

        if(evt.getSource() == jTree1){
            if(jTree1.getSelectionPath()!=null){
                NXNodeMapper node = (NXNodeMapper)jTree1.getSelectionPath().getLastPathComponent();
                updateTextPane(node);
               
            }
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private void updateTextPane(NXNodeMapper node) {
        String newline = "\n";
        String[] initString =
                { 
                  "another ",                                   //italic
                  "styled ",                                    //bold
                  "text ",                                      //small
                  "component, ",                                //large
                  "which supports embedded components..." + newline,//regular
                  " " + newline,                                //button
                  "...and embedded icons..." + newline,         //regular
                  " ",                                          //icon
                  newline + "JTextPane is a subclass of JEditorPane that " +
                    "uses a StyledEditorKit and StyledDocument, and provides " +
                    "cover methods for interacting with those objects."
                 };

        String[] initStyles =
                { "regular", "italic", "bold", "small", "large",
                  "regular", "button", "regular", "icon",
                  "regular"
                };


        StyledDocument doc = jTextPane1.getStyledDocument();

        addStylesToDocument(doc);
        String[] atts = node.getAttributeList();

        try {
            doc.remove(0, doc.getLength());

            doc.insertString(0,node.toString() +
                    newline + newline,doc.getStyle("heading"));

            doc.insertString(doc.getLength(),"Attributes" +
                    newline + newline,doc.getStyle("heading"));

            for (int i=0; i < atts.length; i++) {
                doc.insertString(doc.getLength(),
                        "@ " + atts[i] + newline, doc.getStyle("bold"));
            }

            doc.insertString(doc.getLength(), newline + newline,
                    doc.getStyle("heading"));

            doc.insertString(doc.getLength(),"Node Value" +
                    newline + newline,doc.getStyle("heading"));

            doc.insertString(doc.getLength(),
                        node.getValue(), doc.getStyle("bold"));

        } catch (BadLocationException ex) {
            Logger.getLogger(NXvalidateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    protected void addStylesToDocument(StyledDocument doc) {
        //Initialize some styles.
        Style def = StyleContext.getDefaultStyleContext().
                        getStyle(StyleContext.DEFAULT_STYLE);

        Style regular = doc.addStyle("regular", def);
        StyleConstants.setFontFamily(def, "SansSerif");

        Style s = doc.addStyle("italic", regular);
        StyleConstants.setItalic(s, true);

        s = doc.addStyle("bold", regular);
        StyleConstants.setBold(s, true);

        s = doc.addStyle("small", regular);
        StyleConstants.setFontSize(s, 10);

        s = doc.addStyle("large", regular);
        StyleConstants.setFontSize(s, 16);

        s = doc.addStyle("heading", regular);
        StyleConstants.setFontSize(s, 16);
        StyleConstants.setBold(s, true);

    }



    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NXvalidateFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem openFilesMenuItem;
    private javax.swing.JMenuItem validateSelectedMenuItem;
    // End of variables declaration//GEN-END:variables

}
