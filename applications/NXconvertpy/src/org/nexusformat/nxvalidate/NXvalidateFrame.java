/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NXvalidateFrame.java
 *
 * Created on 02-Jun-2010, 14:17:04
 */
package org.nexusformat.nxvalidate;

import java.awt.Color;
import java.awt.Dialog.ModalityType;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.nexusformat.nxvalidate.exceptions.NXConvertpyException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 *
 * @author Stephen Rankin
 */
public class NXvalidateFrame extends javax.swing.JFrame {

    private DocumentBuilderFactory factory = null;
    private DocumentBuilder builder = null;
    private NXReducedToTree domTree = null;
    private NXNodeMapper root = null;
    private ValidatorUtils validator = null;
    private ResourceBundle bundle = null;
    private File nxsFile = null;
    private File nxdcFile = null;
    private File reducedFile = null;
    private File resultsFile = null;
    private TreeUtils treeUtils = null;
    private ArrayList<Report> reports;
    private UserSettings settings = null;
    private File nxconvertFile = null;
    private boolean foundNXconvert = false;

    /** Creates new form NXvalidateFrame */
    public NXvalidateFrame() {
        initComponents();
        setup();
    }

    private void setup() {

        factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);

        root = new NXNodeMapper("NXS Files");

        domTree = new NXReducedToTree(root);
        jTree1.setModel(domTree);

        try {
            builder = factory.newDocumentBuilder();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(
                    NXvalidateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        bundle = ResourceBundle.getBundle(
                "org/nexusformat/nxvalidate/resources/nxvalidate");

        treeUtils = new TreeUtils();

        XMLTreeRenderer rend = new XMLTreeRenderer(
                "resources/gtk-cancel.png");

        jTree1.setCellRenderer(rend);

        settings = new UserSettings();

        try {
            settings.loadUserSettings();
            nxconvertFile = settings.getNXconvert();

            if(!settings.foundNXconvert()){
                displayErrorMessage(
                            bundle.getString("nxconvertMissingError"));
                foundNXconvert = false;
            }
            else{
                foundNXconvert = true;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(
                    NXvalidateFrame.class.getName()).log(Level.SEVERE,
                    "The settings file cannot be found.", ex);
        } catch (IOException ex) {
            Logger.getLogger(
                    NXvalidateFrame.class.getName()).log(Level.SEVERE,
                    "The settings file IO error.", ex);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogReportProblem = new javax.swing.JOptionPane();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFilesMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        validateSelectedMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        filterMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        bulkMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        settingsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/nexusformat/nxvalidate/resources/nxvalidate"); // NOI18N
        setTitle(bundle.getString("applicationTitle")); // NOI18N
        setMinimumSize(new java.awt.Dimension(400, 400));

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jPanel2.setPreferredSize(new java.awt.Dimension(130, 130));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setContinuousLayout(true);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("NXS Files");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setViewportView(jTextPane1);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jMenu1.setText(bundle.getString("fileMenuItem")); // NOI18N

        openFilesMenuItem.setText("Open Files");
        openFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFilesMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openFilesMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        validateSelectedMenuItem.setText("Validate Selected");
        validateSelectedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateSelectedMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(validateSelectedMenuItem);
        jMenu2.add(jSeparator2);

        filterMenuItem.setText("Filter Good Values");
        jMenu2.add(filterMenuItem);
        jMenu2.add(jSeparator1);

        bulkMenuItem.setText("Bulk Validation");
        jMenu2.add(bulkMenuItem);
        jMenu2.add(jSeparator3);

        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(settingsMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void displayErrorMessage(String message) {

        JTextArea ta = new JTextArea(message);
        ta.setEditable(false);
        ta.setWrapStyleWord(true);
        ta.setLineWrap(true);
        ta.setSize(200, 100);
        dialogReportProblem.showMessageDialog(this, ta);

   }


    private void loadFiles() {
        try {

            //Reduce the file with NXConvert.
            NXconvert convert = new NXconvert(nxsFile, true, nxconvertFile);
            File reducedFile = convert.convert();

            //Display reduced file
            Document document = builder.parse(reducedFile);
            NXNodeMapper node = new NXNodeMapper(
                    document, true, nxsFile);
            node.setReducedDoc(document);
            if (nxdcFile != null) {
                node.setSchematronFile(nxdcFile);
            }
            node.setReducedFile(reducedFile);
            node.setRoot(root);
            root.addNode(node);
            domTree.updateTree();
            nxsFile = null;
            nxdcFile = null;

        } catch (InterruptedException ex) {
            Logger.getLogger(
                    NXvalidateFrame.class.getName()).log(Level.SEVERE,
                    null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(
                    NXvalidateFrame.class.getName()).log(Level.SEVERE,
                    null, ex);
        } catch (IOException ex) {
            Logger.getLogger(
                    NXvalidateFrame.class.getName()).log(Level.SEVERE,
                    null, ex);
        }
    }

    private boolean loadOpenFilesDialog() {

        NXLoadFilesDialog loadFile = new NXLoadFilesDialog(this, true);
        loadFile.setModalityType(ModalityType.APPLICATION_MODAL);
        loadFile.setVisible(true);
        nxsFile = loadFile.getNXSFile();
        nxdcFile = loadFile.getNXDCFile();
        return loadFile.OKButtonUsed();

    }

    private boolean loadValidatFileDialog() {

        NXValidateDialog loadValidate = new NXValidateDialog(this, true);
        loadValidate.setModalityType(ModalityType.APPLICATION_MODAL);
        if (nxdcFile != null) {
            loadValidate.setNXDCFile(nxdcFile);
        }
        loadValidate.setVisible(true);
        nxdcFile = loadValidate.getNXDCFile();
        return loadValidate.OKButtonUsed();

    }

    private boolean loadSettingsFileDialog() {

        NXSettingsDialog loadSettings = new NXSettingsDialog(this, true);
        loadSettings.setModalityType(ModalityType.APPLICATION_MODAL);
        if (nxconvertFile != null) {
            loadSettings.setNXConvertFile(nxconvertFile);
        }
        loadSettings.setVisible(true);
        nxconvertFile = loadSettings.getNXConvertFile();
        return loadSettings.OKButtonUsed();

    }

    private void openFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilesMenuItemActionPerformed

        if (evt.getSource() == openFilesMenuItem) {

            if(!foundNXconvert){
                displayErrorMessage(
                            bundle.getString("nxconvertMissingError"));
                return;
            }

            boolean result = loadOpenFilesDialog();

            if (result) {
                if (nxsFile != null) {
                    loadFiles();
                } else {
                    dialogReportProblem.showMessageDialog(this,
                            bundle.getString("openNexusFileMessage"));
                }
            }
        }

    }//GEN-LAST:event_openFilesMenuItemActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged

        if (evt.getSource() == jTree1) {
            if (jTree1.getSelectionPath() != null) {
                NXNodeMapper node =
                        (NXNodeMapper) jTree1.getSelectionPath().getLastPathComponent();
                updateTextPane(node);

            }
        }

    }//GEN-LAST:event_jTree1ValueChanged

    private void validateSelectedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateSelectedMenuItemActionPerformed

        if (evt.getSource() == validateSelectedMenuItem) {

            if(!foundNXconvert){
                displayErrorMessage(
                            bundle.getString("nxconvertMissingError"));
                return;
            }

            Document reducedDoc = null;
            Document resultsDoc = null;

            //Check to see if the reduction and validation have not already
            //been done, i.e. the files and documents already exist for the
            //current selected tree.
            if (treeUtils.getNXDCFile(jTree1) != null) {
                nxdcFile = treeUtils.getNXDCFile(jTree1);
            }

            if (treeUtils.getReducedFile(jTree1) != null) {
                reducedFile = treeUtils.getReducedFile(jTree1);
                reducedDoc = treeUtils.getReducedDoc(jTree1);
            }

            if (treeUtils.getResultsFile(jTree1) != null) {
                resultsFile = treeUtils.getResultsFile(jTree1);
                resultsDoc = treeUtils.getResultsDoc(jTree1);
            }

            //Show the validate file dialog.
            boolean result = loadValidatFileDialog();

            if (result) {
                if (nxdcFile != null) {

                    try {

                        //Validation has already been done so we reset the tree
                        //before doing the validation again.
                        if (resultsDoc != null) {
                            SVRLNodeFilter filter = new SVRLNodeFilter();
                            filter.setFilterDocument(resultsDoc);
                            filter.setDocument(reducedDoc);
                            filter.resetBadNodes();
                        }

                        //Do the validation.
                        if(nxconvertFile!=null){
                            validator = new ValidatorUtils(nxconvertFile);
                        }
                        else{
                             displayErrorMessage(
                            bundle.getString("nxconvertMissingError"));
                            return;
                        }
                        validator.setSchematron(nxdcFile);
                        validator.setReduced(reducedFile);
                        resultsFile = validator.validate();

                        SVRLNodeFilter filter = new SVRLNodeFilter();

                        resultsDoc = builder.parse(resultsFile);
                        filter.setFilterDocument(resultsDoc);
                        filter.setDocument(reducedDoc);
                        filter.getBadNodeList();

                        treeUtils.setResultsDoc(jTree1, resultsDoc);
                        treeUtils.setResultsFile(jTree1, resultsFile);

                        domTree.updateTree();
                        Logger.getLogger(NXvalidateFrame.class.getName()).log(
                                Level.INFO, "Finished Validating.");
                        dialogReportProblem.showMessageDialog(
                                this,
                                bundle.getString("validationCompleteMessage"));


                    } catch (NXConvertpyException ex) {
                        Logger.getLogger(NXvalidateFrame.class.getName()).log(
                                Level.SEVERE, null, ex);
                    } catch (SAXException ex) {
                        Logger.getLogger(NXvalidateFrame.class.getName()).log(
                                Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(NXvalidateFrame.class.getName()).log(
                                Level.SEVERE, null, ex);
                    }

                } else {
                    dialogReportProblem.showMessageDialog(this,
                            bundle.getString("openSchemaFileMessage"));

                }
            }
        }

    }//GEN-LAST:event_validateSelectedMenuItemActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed

        if (evt.getSource() == settingsMenuItem) {

            boolean result = loadSettingsFileDialog();

            if (result) {
                if (nxconvertFile != null) {
                    settings.setNXconvert(nxconvertFile);
                    settings.saveUserSettings();
                    foundNXconvert = settings.foundNXconvert();
                }
            }

            if(!foundNXconvert){
                displayErrorMessage(
                            bundle.getString("nxconvertMissingError"));
                return;
            }

        }

    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void updateTextPane(NXNodeMapper node) {

        String newline = "\n";
        String[] initString = {
            "another ", //italic
            "styled ", //bold
            "text ", //small
            "component, ", //large
            "which supports embedded components..." + newline,//regular
            " " + newline, //button
            "...and embedded icons..." + newline, //regular
            " ", //icon
            newline + "JTextPane is a subclass of JEditorPane that "
            + "uses a StyledEditorKit and StyledDocument, and provides "
            + "cover methods for interacting with those objects."
        };

        String[] initStyles = {"regular", "italic", "bold", "small", "large",
            "regular", "button", "regular", "icon",
            "regular"
        };


        StyledDocument doc = jTextPane1.getStyledDocument();

        addStylesToDocument(
                doc);
        String[] atts = node.getAttributeList();



        try {
            doc.remove(0, doc.getLength());

            doc.insertString(0, node.toString()
                    + newline + newline, doc.getStyle("title"));

            doc.insertString(doc.getLength(), "Attributes:"
                    + newline + newline, doc.getStyle("heading"));



            for (int i = 0; i
                    < atts.length; i++) {
                doc.insertString(doc.getLength(),
                        "@ " + atts[i] + newline, doc.getStyle("bold"));


            }

            doc.insertString(doc.getLength(), newline + newline,
                    doc.getStyle("heading"));

            doc.insertString(doc.getLength(), "Node Value:"
                    + newline + newline, doc.getStyle("heading"));

            doc.insertString(doc.getLength(),
                    node.getValue(), doc.getStyle("bold"));

            doc.insertString(doc.getLength(), newline + newline,
                    doc.getStyle("heading"));

            doc.insertString(doc.getLength(), "Validation Tests:"
                    + newline + newline, doc.getStyle("heading"));



            if (node.getNodeTests() != null) {

                for (int i = 0; i
                        < node.getNodeTests().size();
                        ++i) {
                    doc.insertString(doc.getLength(),
                            node.getNodeTests().get(i), doc.getStyle("bold"));

                    doc.insertString(doc.getLength(), newline + newline,
                            doc.getStyle("heading"));


                }

            }

            doc.insertString(doc.getLength(), "Validation Errors:"
                    + newline + newline, doc.getStyle("errorheading"));

            if (node.getNodeTexts() != null) {

                for (int i = 0; i
                        < node.getNodeTexts().size();
                        ++i) {
                    doc.insertString(doc.getLength(),
                            node.getNodeTexts().get(i), doc.getStyle("error"));

                    doc.insertString(doc.getLength(), newline + newline,
                            doc.getStyle("heading"));


                }

            }

            doc.insertString(doc.getLength(), "Diagnostic Errors:"
                    + newline + newline, doc.getStyle("errorheading"));

            if (node.getNodeDiags() != null) {

                for (int i = 0; i
                        < node.getNodeDiags().size();
                        ++i) {
                    doc.insertString(doc.getLength(),
                            node.getNodeDiags().get(i), doc.getStyle("error"));

                    doc.insertString(doc.getLength(), newline + newline,
                            doc.getStyle("heading"));

                }

            }

        } catch (BadLocationException ex) {
            Logger.getLogger(NXvalidateFrame.class.getName()).log(Level.SEVERE,
                    null, ex);
        }

    }

    protected void addStylesToDocument(StyledDocument doc) {

        //Initialize some styles.
        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);

        Style regular = doc.addStyle("regular", def);
        StyleConstants.setFontFamily(def, "SansSerif");

        Style s = doc.addStyle("italic", regular);
        StyleConstants.setItalic(s, true);

        s = doc.addStyle("bold", regular);
        StyleConstants.setBold(s, true);

        s = doc.addStyle("small", regular);
        StyleConstants.setFontSize(s, 10);

        s = doc.addStyle("large", regular);
        StyleConstants.setFontSize(s, 16);

        s = doc.addStyle("heading", regular);
        StyleConstants.setFontSize(s, 16);
        StyleConstants.setBold(s, true);

        s = doc.addStyle("title", regular);
        StyleConstants.setFontSize(s, 24);
        StyleConstants.setBold(s, true);

        s = doc.addStyle("errorheading", regular);
        StyleConstants.setFontSize(s, 16);
        StyleConstants.setBold(s, true);
        StyleConstants.setForeground(s, Color.red);

        s = doc.addStyle("error", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setForeground(s, Color.red);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NXvalidateFrame().setVisible(true);
            }
        });


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bulkMenuItem;
    private javax.swing.JOptionPane dialogReportProblem;
    private javax.swing.JMenuItem filterMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem openFilesMenuItem;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JMenuItem validateSelectedMenuItem;
    // End of variables declaration//GEN-END:variables
}
