The NAPI FORTRAN interface consists of wrapper routines (napif.f) and
an include file of definitions (napif.inc). The routines are called
exactly like their C counterparts, but the setup for NXHandle
and NXlink structures is done slightly differently (see the
example program "napif_test.f")

For a NXhandle, you use:

    INTEGER FILEID(NXFILESIZE)

And for an NXlink

    INTEGER LINK(NXLINKSIZE)

The two test programs perform exactly the same operations, but one is in
C and the other FORTRAN

--- Running the Examples ---

You will need to get copies of the HDF (Hierarchical Data Format)
libraries approriate for your operating system. These can be obtained from: 

    http://hdf.ncsa.uiuc.edu/

The default installation is to put the C header files into
/usr/local/hdf/include and the libraries into /usr/local/hdf/lib

*** Running C interface test ***

cc -c -I/usr/local/hdf/include napi.c
cc -c -I/usr/local/hdf/include napi_test.c
cc -o napi_test napi_test.o napi.o -L/usr/local/hdf/lib -lmfhdf -ldf -lz

./napi_test

*** Running FORTRAN interface test ***

cc -c -I/usr/local/hdf/include napi.c
f77 -c napif.f 
f77 -c napif_test.f
f77 -o napif_test napif_test.o napif.o napi.o -L/usr/local/hdf/lib -lmfhdf -ldf -lz

./napif_test

Both these test programs should print the following:

ch_data : 4
Values : NeXus data
i1_data : 20
Values : 1 2 3 4
i2_data : 22
Values : 1000 2000 3000 4000
i4_data : 24
Values : 1000000 2000000 3000000 4000000
r4_data : 5
Values : 1.000000 2.000000 3.000000 4.000000
       : 5.000000 6.000000 7.000000 8.000000
       : 9.000000 10.000000 11.000000 12.000000
       : 13.000000 14.000000 15.000000 16.000000
       : 17.000000 18.000000 19.000000 20.000000
r8_data : 6
Values : 1.000000 2.000000 3.000000 4.000000
       : 5.000000 6.000000 7.000000 8.000000
       : 9.000000 10.000000 11.000000 12.000000
       : 13.000000 14.000000 15.000000 16.000000
       : 17.000000 18.000000 19.000000 20.000000
ch_attribute : NeXus
i4_attribute : 42
r4_attribute : 3.141593

A file called "NXtest.nxs" is also created.

*** Cross-checking the interfaces ***

To check that the Fortran 77 interface produces the equivalent file to the 
C interface, use "napi_test_read.c" to read the Fortran-generated file 
"NXtest.nxs".

cc -c -I/usr/local/hdf/include napi_test_read.c
cc -o napi_test_read napi_test_read.o napi.o -L/usr/local/hdf/lib -lmfhdf -ldf -lz

./napi_test_read

This produces the same output as the other test programs.

*** FORTRAN Interface Notes ***

- NAPIF.F uses the non-standard type specification BYTE to convert Fortran
  character data to C strings.  There is no method of specifying single-byte
  storage under the Fortran 77 standard, but if the BYTE specification is 
  not allowed by your Fortran compiler, please try one of the other common
  compiler extensions, e.g., INTEGER*1, LOGICAL*1.

- There are separate routines for reading and writing character data
  and attributes (NXGETCHARDATA, NXGETCHARATTR, NXPUTCHARDATA, NXPUTCHARATTR).
  This is necessary because character strings are passed by descriptor rather
  than by reference.

- If you don't wish to use these routines, it is possible to pass character
  data to the C interface using the regular routines (i.e. NXGETDATA etc) 
  by forcing the string arguments to be passed by reference.  Either 
  equivalence the string to a BYTE array or use the %REF (or equivalent) 
  function.  It does not appear to be necessary to null-terminate the strings
  since the string length, passed to the HDF file, does not include the 
  terminator.

--
Freddie Akeroyd
ISIS Facility
Rutherford Appleton Laboratory
Chilton, Didcot, OX11 OQX, GB

Email: Freddie.Akeroyd@rl.ac.uk

$Id$
