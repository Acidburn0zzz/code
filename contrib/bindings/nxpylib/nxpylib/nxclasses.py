import types

import nxfile
from nxbaseclass import *



class NXentry(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXentry", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXinstrument(self, name):
		return NXgroupbase.getGroup(self, name, "NXinstrument")

	def readNXinstrument(self, name, file):
		subgroupid = name+":"+"NXinstrument"
		return self.readSubGroup(subgroupid, file)

	def getNXdata(self, name):
		return NXgroupbase.getGroup(self, name, "NXdata")

	def readNXdata(self, name, file):
		subgroupid = name+":"+"NXdata"
		return self.readSubGroup(subgroupid, file)

	def getNXsample(self, name):
		return NXgroupbase.getGroup(self, name, "NXsample")

	def readNXsample(self, name, file):
		subgroupid = name+":"+"NXsample"
		return self.readSubGroup(subgroupid, file)

	def getNXuser(self, name):
		return NXgroupbase.getGroup(self, name, "NXuser")

	def readNXuser(self, name, file):
		subgroupid = name+":"+"NXuser"
		return self.readSubGroup(subgroupid, file)

	def getNXmonitor(self, name):
		return NXgroupbase.getGroup(self, name, "NXmonitor")

	def readNXmonitor(self, name, file):
		subgroupid = name+":"+"NXmonitor"
		return self.readSubGroup(subgroupid, file)

	def get_definition(self):
		return self.getElem("definition")

	def set_definition(self, elem):
		return self.setElem(elem)

	def get_run_number(self):
		return self.getElem("run_number")

	def set_run_number(self, elem):
		return self.setElem(elem)

	def get_title(self):
		return self.getElem("title")

	def set_title(self, elem):
		return self.setElem(elem)

	def get_run_cycle(self):
		return self.getElem("run_cycle")

	def set_run_cycle(self, elem):
		return self.setElem(elem)

	def get_notes(self):
		return self.getElem("notes")

	def set_notes(self, elem):
		return self.setElem(elem)

	def get_command_line(self):
		return self.getElem("command_line")

	def set_command_line(self, elem):
		return self.setElem(elem)

	def get_experiment_identifier(self):
		return self.getElem("experiment_identifier")

	def set_experiment_identifier(self, elem):
		return self.setElem(elem)

	def get_end_time(self):
		return self.getElem("end_time")

	def set_end_time(self, elem):
		return self.setElem(elem)

	def get_duration(self):
		return self.getElem("duration")

	def set_duration(self, elem):
		return self.setElem(elem)

	def get_program_name(self):
		return self.getElem("program_name")

	def set_program_name(self, elem):
		return self.setElem(elem)

	def get_start_time(self):
		return self.getElem("start_time")

	def set_start_time(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXroot(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXroot", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXentry(self, name):
		return NXgroupbase.getGroup(self, name, "NXentry")

	def readNXentry(self, name, file):
		subgroupid = name+":"+"NXentry"
		return self.readSubGroup(subgroupid, file)

	def getattr_NeXus_version(self):
		return self.getAttr("NeXus_version")

	def setattr_NeXus_version(self, elem):
		return self.setAttr(elem)

	def getattr_HDF5_version(self):
		return self.getAttr("HDF5_version")

	def setattr_HDF5_version(self, elem):
		return self.setAttr(elem)

	def getattr_creator(self):
		return self.getAttr("creator")

	def setattr_creator(self, elem):
		return self.setAttr(elem)

	def getattr_file_name(self):
		return self.getAttr("file_name")

	def setattr_file_name(self, elem):
		return self.setAttr(elem)

	def getattr_file_update_time(self):
		return self.getAttr("file_update_time")

	def setattr_file_update_time(self, elem):
		return self.setAttr(elem)

	def getattr_HDF_version(self):
		return self.getAttr("HDF_version")

	def setattr_HDF_version(self, elem):
		return self.setAttr(elem)

	def getattr_file_time(self):
		return self.getAttr("file_time")

	def setattr_file_time(self, elem):
		return self.setAttr(elem)




class NXsample(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXsample", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXlog(self, name):
		return NXgroupbase.getGroup(self, name, "NXlog")

	def readNXlog(self, name, file):
		subgroupid = name+":"+"NXlog"
		return self.readSubGroup(subgroupid, file)

	def getNXdata(self, name):
		return NXgroupbase.getGroup(self, name, "NXdata")

	def readNXdata(self, name, file):
		subgroupid = name+":"+"NXdata"
		return self.readSubGroup(subgroupid, file)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def getNXbeam(self, name):
		return NXgroupbase.getGroup(self, name, "NXbeam")

	def readNXbeam(self, name, file):
		subgroupid = name+":"+"NXbeam"
		return self.readSubGroup(subgroupid, file)

	def getNXenvironment(self, name):
		return NXgroupbase.getGroup(self, name, "NXenvironment")

	def readNXenvironment(self, name, file):
		subgroupid = name+":"+"NXenvironment"
		return self.readSubGroup(subgroupid, file)

	def get_changer_position(self):
		return self.getElem("changer_position")

	def set_changer_position(self, elem):
		return self.setElem(elem)

	def get_description(self):
		return self.getElem("description")

	def set_description(self, elem):
		return self.setElem(elem)

	def get_sample_component(self):
		return self.getElem("sample_component")

	def set_sample_component(self, elem):
		return self.setElem(elem)

	def get_magnetic_field(self):
		return self.getElem("magnetic_field")

	def set_magnetic_field(self, elem):
		return self.setElem(elem)

	def get_unit_cell_class(self):
		return self.getElem("unit_cell_class")

	def set_unit_cell_class(self, elem):
		return self.setElem(elem)

	def get_component(self):
		return self.getElem("component")

	def set_component(self, elem):
		return self.setElem(elem)

	def get_unit_cell_group(self):
		return self.getElem("unit_cell_group")

	def set_unit_cell_group(self, elem):
		return self.setElem(elem)

	def get_pressure(self):
		return self.getElem("pressure")

	def set_pressure(self, elem):
		return self.setElem(elem)

	def get_electric_field(self):
		return self.getElem("electric_field")

	def set_electric_field(self, elem):
		return self.setElem(elem)

	def get_orientation_matrix(self):
		return self.getElem("orientation_matrix")

	def set_orientation_matrix(self, elem):
		return self.setElem(elem)

	def get_concentration(self):
		return self.getElem("concentration")

	def set_concentration(self, elem):
		return self.setElem(elem)

	def get_unit_cell(self):
		return self.getElem("unit_cell")

	def set_unit_cell(self, elem):
		return self.setElem(elem)

	def get_mass(self):
		return self.getElem("mass")

	def set_mass(self, elem):
		return self.setElem(elem)

	def get_temperature(self):
		return self.getElem("temperature")

	def set_temperature(self, elem):
		return self.setElem(elem)

	def get_name(self):
		return self.getElem("name")

	def set_name(self, elem):
		return self.setElem(elem)

	def get_unit_cell_volume(self):
		return self.getElem("unit_cell_volume")

	def set_unit_cell_volume(self, elem):
		return self.setElem(elem)

	def get_density(self):
		return self.getElem("density")

	def set_density(self, elem):
		return self.setElem(elem)

	def get_path_length_window(self):
		return self.getElem("path_length_window")

	def set_path_length_window(self, elem):
		return self.setElem(elem)

	def get_preparation_date(self):
		return self.getElem("preparation_date")

	def set_preparation_date(self, elem):
		return self.setElem(elem)

	def get_path_length(self):
		return self.getElem("path_length")

	def set_path_length(self, elem):
		return self.setElem(elem)

	def get_short_title(self):
		return self.getElem("short_title")

	def set_short_title(self, elem):
		return self.setElem(elem)

	def get_stress_field(self):
		return self.getElem("stress_field")

	def set_stress_field(self, elem):
		return self.setElem(elem)

	def get_external_DAC(self):
		return self.getElem("external_DAC")

	def set_external_DAC(self, elem):
		return self.setElem(elem)

	def get_scattering_length_density(self):
		return self.getElem("scattering_length_density")

	def set_scattering_length_density(self, elem):
		return self.setElem(elem)

	def get_volume_fraction(self):
		return self.getElem("volume_fraction")

	def set_volume_fraction(self, elem):
		return self.setElem(elem)

	def get_relative_molecular_mass(self):
		return self.getElem("relative_molecular_mass")

	def set_relative_molecular_mass(self, elem):
		return self.setElem(elem)

	def get_situation(self):
		return self.getElem("situation")

	def set_situation(self, elem):
		return self.setElem(elem)

	def get_chemical_formula(self):
		return self.getElem("chemical_formula")

	def set_chemical_formula(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXsensor(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXsensor", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXlog(self, name):
		return NXgroupbase.getGroup(self, name, "NXlog")

	def readNXlog(self, name, file):
		subgroupid = name+":"+"NXlog"
		return self.readSubGroup(subgroupid, file)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def getNXorientation(self, name):
		return NXgroupbase.getGroup(self, name, "NXorientation")

	def readNXorientation(self, name, file):
		subgroupid = name+":"+"NXorientation"
		return self.readSubGroup(subgroupid, file)

	def get_low_trip_value(self):
		return self.getElem("low_trip_value")

	def set_low_trip_value(self, elem):
		return self.setElem(elem)

	def get_attached_to(self):
		return self.getElem("attached_to")

	def set_attached_to(self, elem):
		return self.setElem(elem)

	def get_name(self):
		return self.getElem("name")

	def set_name(self, elem):
		return self.setElem(elem)

	def get_short_name(self):
		return self.getElem("short_name")

	def set_short_name(self, elem):
		return self.setElem(elem)

	def get_run_control(self):
		return self.getElem("run_control")

	def set_run_control(self, elem):
		return self.setElem(elem)

	def get_high_trip_value(self):
		return self.getElem("high_trip_value")

	def set_high_trip_value(self, elem):
		return self.setElem(elem)

	def get_value(self):
		return self.getElem("value")

	def set_value(self, elem):
		return self.setElem(elem)

	def get_value_deriv2(self):
		return self.getElem("value_deriv2")

	def set_value_deriv2(self, elem):
		return self.setElem(elem)

	def get_value_deriv1(self):
		return self.getElem("value_deriv1")

	def set_value_deriv1(self, elem):
		return self.setElem(elem)

	def get_measurement(self):
		return self.getElem("measurement")

	def set_measurement(self, elem):
		return self.setElem(elem)

	def get_model(self):
		return self.getElem("model")

	def set_model(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_external_field_brief(self):
		return self.getElem("external_field_brief")

	def set_external_field_brief(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXuser(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXuser", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_affiliation(self):
		return self.getElem("affiliation")

	def set_affiliation(self, elem):
		return self.setElem(elem)

	def get_role(self):
		return self.getElem("role")

	def set_role(self, elem):
		return self.setElem(elem)

	def get_name(self):
		return self.getElem("name")

	def set_name(self, elem):
		return self.setElem(elem)

	def get_address(self):
		return self.getElem("address")

	def set_address(self, elem):
		return self.setElem(elem)

	def get_telephone_number(self):
		return self.getElem("telephone_number")

	def set_telephone_number(self, elem):
		return self.setElem(elem)

	def get_fax_number(self):
		return self.getElem("fax_number")

	def set_fax_number(self, elem):
		return self.setElem(elem)

	def get_facility_user_id(self):
		return self.getElem("facility_user_id")

	def set_facility_user_id(self, elem):
		return self.setElem(elem)

	def get_email(self):
		return self.getElem("email")

	def set_email(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXvelocity_selector(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXvelocity_selector", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_rotation_speed(self):
		return self.getElem("rotation_speed")

	def set_rotation_speed(self, elem):
		return self.setElem(elem)

	def get_wavelength_spread(self):
		return self.getElem("wavelength_spread")

	def set_wavelength_spread(self, elem):
		return self.setElem(elem)

	def get_height(self):
		return self.getElem("height")

	def set_height(self, elem):
		return self.setElem(elem)

	def get_twist(self):
		return self.getElem("twist")

	def set_twist(self, elem):
		return self.setElem(elem)

	def get_width(self):
		return self.getElem("width")

	def set_width(self, elem):
		return self.setElem(elem)

	def get_length(self):
		return self.getElem("length")

	def set_length(self, elem):
		return self.setElem(elem)

	def get_num(self):
		return self.getElem("num")

	def set_num(self, elem):
		return self.setElem(elem)

	def get_radius(self):
		return self.getElem("radius")

	def set_radius(self, elem):
		return self.setElem(elem)

	def get_wavelength(self):
		return self.getElem("wavelength")

	def set_wavelength(self, elem):
		return self.setElem(elem)

	def get_spwidth(self):
		return self.getElem("spwidth")

	def set_spwidth(self, elem):
		return self.setElem(elem)

	def get_table(self):
		return self.getElem("table")

	def set_table(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXenvironment(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXenvironment", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXnote(self, name):
		return NXgroupbase.getGroup(self, name, "NXnote")

	def readNXnote(self, name, file):
		subgroupid = name+":"+"NXnote"
		return self.readSubGroup(subgroupid, file)

	def getNXsensor(self, name):
		return NXgroupbase.getGroup(self, name, "NXsensor")

	def readNXsensor(self, name, file):
		subgroupid = name+":"+"NXsensor"
		return self.readSubGroup(subgroupid, file)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def get_program(self):
		return self.getElem("program")

	def set_program(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_name(self):
		return self.getElem("name")

	def set_name(self, elem):
		return self.setElem(elem)

	def get_short_name(self):
		return self.getElem("short_name")

	def set_short_name(self, elem):
		return self.setElem(elem)

	def get_description(self):
		return self.getElem("description")

	def set_description(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXmonitor(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXmonitor", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXlog(self, name):
		return NXgroupbase.getGroup(self, name, "NXlog")

	def readNXlog(self, name, file):
		subgroupid = name+":"+"NXlog"
		return self.readSubGroup(subgroupid, file)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def get_time_of_flight(self):
		return self.getElem("time_of_flight")

	def set_time_of_flight(self, elem):
		return self.setElem(elem)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_range(self):
		return self.getElem("range")

	def set_range(self, elem):
		return self.setElem(elem)

	def get_preset(self):
		return self.getElem("preset")

	def set_preset(self, elem):
		return self.setElem(elem)

	def get_mode(self):
		return self.getElem("mode")

	def set_mode(self, elem):
		return self.setElem(elem)

	def get_efficiency(self):
		return self.getElem("efficiency")

	def set_efficiency(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_sampled_fraction(self):
		return self.getElem("sampled_fraction")

	def set_sampled_fraction(self, elem):
		return self.setElem(elem)

	def get_integral(self):
		return self.getElem("integral")

	def set_integral(self, elem):
		return self.setElem(elem)

	def get_data(self):
		return self.getElem("data")

	def set_data(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXinstrument(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXinstrument", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXsource(self, name):
		return NXgroupbase.getGroup(self, name, "NXsource")

	def readNXsource(self, name, file):
		subgroupid = name+":"+"NXsource"
		return self.readSubGroup(subgroupid, file)

	def getNXdetector(self, name):
		return NXgroupbase.getGroup(self, name, "NXdetector")

	def readNXdetector(self, name, file):
		subgroupid = name+":"+"NXdetector"
		return self.readSubGroup(subgroupid, file)

	def getNXattenuator(self, name):
		return NXgroupbase.getGroup(self, name, "NXattenuator")

	def readNXattenuator(self, name, file):
		subgroupid = name+":"+"NXattenuator"
		return self.readSubGroup(subgroupid, file)

	def getNXfermi_chopper(self, name):
		return NXgroupbase.getGroup(self, name, "NXfermi_chopper")

	def readNXfermi_chopper(self, name, file):
		subgroupid = name+":"+"NXfermi_chopper"
		return self.readSubGroup(subgroupid, file)

	def getNXflipper(self, name):
		return NXgroupbase.getGroup(self, name, "NXflipper")

	def readNXflipper(self, name, file):
		subgroupid = name+":"+"NXflipper"
		return self.readSubGroup(subgroupid, file)

	def getNXcrystal(self, name):
		return NXgroupbase.getGroup(self, name, "NXcrystal")

	def readNXcrystal(self, name, file):
		subgroupid = name+":"+"NXcrystal"
		return self.readSubGroup(subgroupid, file)

	def getNXfilter(self, name):
		return NXgroupbase.getGroup(self, name, "NXfilter")

	def readNXfilter(self, name, file):
		subgroupid = name+":"+"NXfilter"
		return self.readSubGroup(subgroupid, file)

	def getNXvelocity_selector(self, name):
		return NXgroupbase.getGroup(self, name, "NXvelocity_selector")

	def readNXvelocity_selector(self, name, file):
		subgroupid = name+":"+"NXvelocity_selector"
		return self.readSubGroup(subgroupid, file)

	def getNXdisk_chopper(self, name):
		return NXgroupbase.getGroup(self, name, "NXdisk_chopper")

	def readNXdisk_chopper(self, name, file):
		subgroupid = name+":"+"NXdisk_chopper"
		return self.readSubGroup(subgroupid, file)

	def getNXmirror(self, name):
		return NXgroupbase.getGroup(self, name, "NXmirror")

	def readNXmirror(self, name, file):
		subgroupid = name+":"+"NXmirror"
		return self.readSubGroup(subgroupid, file)

	def getNXcollimator(self, name):
		return NXgroupbase.getGroup(self, name, "NXcollimator")

	def readNXcollimator(self, name, file):
		subgroupid = name+":"+"NXcollimator"
		return self.readSubGroup(subgroupid, file)

	def getNXaperture(self, name):
		return NXgroupbase.getGroup(self, name, "NXaperture")

	def readNXaperture(self, name, file):
		subgroupid = name+":"+"NXaperture"
		return self.readSubGroup(subgroupid, file)

	def getNXpolarizer(self, name):
		return NXgroupbase.getGroup(self, name, "NXpolarizer")

	def readNXpolarizer(self, name, file):
		subgroupid = name+":"+"NXpolarizer"
		return self.readSubGroup(subgroupid, file)

	def getNXguide(self, name):
		return NXgroupbase.getGroup(self, name, "NXguide")

	def readNXguide(self, name, file):
		subgroupid = name+":"+"NXguide"
		return self.readSubGroup(subgroupid, file)

	def getNXbeam_stop(self, name):
		return NXgroupbase.getGroup(self, name, "NXbeam_stop")

	def readNXbeam_stop(self, name, file):
		subgroupid = name+":"+"NXbeam_stop"
		return self.readSubGroup(subgroupid, file)

	def get_name(self):
		return self.getElem("name")

	def set_name(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXbeam(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXbeam", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXdata(self, name):
		return NXgroupbase.getGroup(self, name, "NXdata")

	def readNXdata(self, name, file):
		subgroupid = name+":"+"NXdata"
		return self.readSubGroup(subgroupid, file)

	def get_incident_polarization(self):
		return self.getElem("incident_polarization")

	def set_incident_polarization(self, elem):
		return self.setElem(elem)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_incident_wavelength(self):
		return self.getElem("incident_wavelength")

	def set_incident_wavelength(self, elem):
		return self.setElem(elem)

	def get_incident_energy(self):
		return self.getElem("incident_energy")

	def set_incident_energy(self, elem):
		return self.setElem(elem)

	def get_final_polarization(self):
		return self.getElem("final_polarization")

	def set_final_polarization(self, elem):
		return self.setElem(elem)

	def get_incident_wavelength_spread(self):
		return self.getElem("incident_wavelength_spread")

	def set_incident_wavelength_spread(self, elem):
		return self.setElem(elem)

	def get_final_wavelength_spread(self):
		return self.getElem("final_wavelength_spread")

	def set_final_wavelength_spread(self, elem):
		return self.setElem(elem)

	def get_flux(self):
		return self.getElem("flux")

	def set_flux(self, elem):
		return self.setElem(elem)

	def get_incident_beam_divergence(self):
		return self.getElem("incident_beam_divergence")

	def set_incident_beam_divergence(self, elem):
		return self.setElem(elem)

	def get_final_wavelength(self):
		return self.getElem("final_wavelength")

	def set_final_wavelength(self, elem):
		return self.setElem(elem)

	def get_energy_transfer(self):
		return self.getElem("energy_transfer")

	def set_energy_transfer(self, elem):
		return self.setElem(elem)

	def get_final_beam_divergence(self):
		return self.getElem("final_beam_divergence")

	def set_final_beam_divergence(self, elem):
		return self.setElem(elem)

	def get_final_energy(self):
		return self.getElem("final_energy")

	def set_final_energy(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXlog(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXlog", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_raw_value(self):
		return self.getElem("raw_value")

	def set_raw_value(self, elem):
		return self.setElem(elem)

	def get_description(self):
		return self.getElem("description")

	def set_description(self, elem):
		return self.setElem(elem)

	def get_value(self):
		return self.getElem("value")

	def set_value(self, elem):
		return self.setElem(elem)

	def get_time(self):
		return self.getElem("time")

	def set_time(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXgeometry(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXgeometry", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXtranslation(self, name):
		return NXgroupbase.getGroup(self, name, "NXtranslation")

	def readNXtranslation(self, name, file):
		subgroupid = name+":"+"NXtranslation"
		return self.readSubGroup(subgroupid, file)

	def getNXshape(self, name):
		return NXgroupbase.getGroup(self, name, "NXshape")

	def readNXshape(self, name, file):
		subgroupid = name+":"+"NXshape"
		return self.readSubGroup(subgroupid, file)

	def getNXorientation(self, name):
		return NXgroupbase.getGroup(self, name, "NXorientation")

	def readNXorientation(self, name, file):
		subgroupid = name+":"+"NXorientation"
		return self.readSubGroup(subgroupid, file)

	def get_component_index(self):
		return self.getElem("component_index")

	def set_component_index(self, elem):
		return self.setElem(elem)

	def get_description(self):
		return self.getElem("description")

	def set_description(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXshape(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXshape", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_shape(self):
		return self.getElem("shape")

	def set_shape(self, elem):
		return self.setElem(elem)

	def get_size(self):
		return self.getElem("size")

	def set_size(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXtranslation(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXtranslation", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def get_distances(self):
		return self.getElem("distances")

	def set_distances(self, elem):
		return self.setElem(elem)

	def get_angles(self):
		return self.getElem("angles")

	def set_angles(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXorientation(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXorientation", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def get_value(self):
		return self.getElem("value")

	def set_value(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXevent_data(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXevent_data", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXnote(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXnote", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_description(self):
		return self.getElem("description")

	def set_description(self, elem):
		return self.setElem(elem)

	def get_author(self):
		return self.getElem("author")

	def set_author(self, elem):
		return self.setElem(elem)

	def get_date(self):
		return self.getElem("date")

	def set_date(self, elem):
		return self.setElem(elem)

	def get_file_name(self):
		return self.getElem("file_name")

	def set_file_name(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_data(self):
		return self.getElem("data")

	def set_data(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXsource(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXsource", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def getNXdata(self, name):
		return NXgroupbase.getGroup(self, name, "NXdata")

	def readNXdata(self, name, file):
		subgroupid = name+":"+"NXdata"
		return self.readSubGroup(subgroupid, file)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_target_material(self):
		return self.getElem("target_material")

	def set_target_material(self, elem):
		return self.setElem(elem)

	def get_name(self):
		return self.getElem("name")

	def set_name(self, elem):
		return self.setElem(elem)

	def get_power(self):
		return self.getElem("power")

	def set_power(self, elem):
		return self.setElem(elem)

	def get_notes(self):
		return self.getElem("notes")

	def set_notes(self, elem):
		return self.setElem(elem)

	def get_probe(self):
		return self.getElem("probe")

	def set_probe(self, elem):
		return self.setElem(elem)

	def get_period(self):
		return self.getElem("period")

	def set_period(self, elem):
		return self.setElem(elem)

	def get_current(self):
		return self.getElem("current")

	def set_current(self, elem):
		return self.setElem(elem)

	def get_frequency(self):
		return self.getElem("frequency")

	def set_frequency(self, elem):
		return self.setElem(elem)

	def get_voltage(self):
		return self.getElem("voltage")

	def set_voltage(self, elem):
		return self.setElem(elem)

	def get_pulse_width(self):
		return self.getElem("pulse_width")

	def set_pulse_width(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXmoderator(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXmoderator", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXlog(self, name):
		return NXgroupbase.getGroup(self, name, "NXlog")

	def readNXlog(self, name, file):
		subgroupid = name+":"+"NXlog"
		return self.readSubGroup(subgroupid, file)

	def getNXdata(self, name):
		return NXgroupbase.getGroup(self, name, "NXdata")

	def readNXdata(self, name, file):
		subgroupid = name+":"+"NXdata"
		return self.readSubGroup(subgroupid, file)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_poison_depth(self):
		return self.getElem("poison_depth")

	def set_poison_depth(self, elem):
		return self.setElem(elem)

	def get_temperature(self):
		return self.getElem("temperature")

	def set_temperature(self, elem):
		return self.setElem(elem)

	def get_coupled(self):
		return self.getElem("coupled")

	def set_coupled(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_poison_material(self):
		return self.getElem("poison_material")

	def set_poison_material(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXcrystal(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXcrystal", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_lattice_parameter(self):
		return self.getElem("lattice_parameter")

	def set_lattice_parameter(self, elem):
		return self.setElem(elem)

	def get_reflection(self):
		return self.getElem("reflection")

	def set_reflection(self, elem):
		return self.setElem(elem)

	def get_horizontal_aperture(self):
		return self.getElem("horizontal_aperture")

	def set_horizontal_aperture(self, elem):
		return self.setElem(elem)

	def get_wavelength(self):
		return self.getElem("wavelength")

	def set_wavelength(self, elem):
		return self.setElem(elem)

	def get_horizontal_curvature(self):
		return self.getElem("horizontal_curvature")

	def set_horizontal_curvature(self, elem):
		return self.setElem(elem)

	def get_vertical_aperture(self):
		return self.getElem("vertical_aperture")

	def set_vertical_aperture(self, elem):
		return self.setElem(elem)

	def get_vertical_curvature(self):
		return self.getElem("vertical_curvature")

	def set_vertical_curvature(self, elem):
		return self.setElem(elem)

	def get_energy(self):
		return self.getElem("energy")

	def set_energy(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXdisc_chopper(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXdisc_chopper", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_slit_angle(self):
		return self.getElem("slit_angle")

	def set_slit_angle(self, elem):
		return self.setElem(elem)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_slit_height(self):
		return self.getElem("slit_height")

	def set_slit_height(self, elem):
		return self.setElem(elem)

	def get_radius(self):
		return self.getElem("radius")

	def set_radius(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_phase(self):
		return self.getElem("phase")

	def set_phase(self, elem):
		return self.setElem(elem)

	def get_pair_separation(self):
		return self.getElem("pair_separation")

	def set_pair_separation(self, elem):
		return self.setElem(elem)

	def get_rotation_speed(self):
		return self.getElem("rotation_speed")

	def set_rotation_speed(self, elem):
		return self.setElem(elem)

	def get_ratio(self):
		return self.getElem("ratio")

	def set_ratio(self, elem):
		return self.setElem(elem)

	def get_slits(self):
		return self.getElem("slits")

	def set_slits(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXfermi_chopper(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXfermi_chopper", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_width(self):
		return self.getElem("width")

	def set_width(self, elem):
		return self.setElem(elem)

	def get_slit(self):
		return self.getElem("slit")

	def set_slit(self, elem):
		return self.setElem(elem)

	def get_num(self):
		return self.getElem("num")

	def set_num(self, elem):
		return self.setElem(elem)

	def get_radius(self):
		return self.getElem("radius")

	def set_radius(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_rotation_speed(self):
		return self.getElem("rotation_speed")

	def set_rotation_speed(self, elem):
		return self.setElem(elem)

	def get_r_slit(self):
		return self.getElem("r_slit")

	def set_r_slit(self, elem):
		return self.setElem(elem)

	def get_height(self):
		return self.getElem("height")

	def set_height(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXcollimator(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXcollimator", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_length(self):
		return self.getElem("length")

	def set_length(self, elem):
		return self.setElem(elem)

	def get_radius(self):
		return self.getElem("radius")

	def set_radius(self, elem):
		return self.setElem(elem)

	def get_horizontal_aperture(self):
		return self.getElem("horizontal_aperture")

	def set_horizontal_aperture(self, elem):
		return self.setElem(elem)

	def get_vertical_aperture(self):
		return self.getElem("vertical_aperture")

	def set_vertical_aperture(self, elem):
		return self.setElem(elem)

	def get_soller_angle(self):
		return self.getElem("soller_angle")

	def set_soller_angle(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXguide(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXguide", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXattenuator(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXattenuator", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_attenuation(self):
		return self.getElem("attenuation")

	def set_attenuation(self, elem):
		return self.setElem(elem)

	def get_thickness(self):
		return self.getElem("thickness")

	def set_thickness(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_absorption_cross_section(self):
		return self.getElem("absorption_cross_section")

	def set_absorption_cross_section(self, elem):
		return self.setElem(elem)

	def get_scattering_cross_section(self):
		return self.getElem("scattering_cross_section")

	def set_scattering_cross_section(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXaperture(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXaperture", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_horizontal_aperture(self):
		return self.getElem("horizontal_aperture")

	def set_horizontal_aperture(self, elem):
		return self.setElem(elem)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_shape(self):
		return self.getElem("shape")

	def set_shape(self, elem):
		return self.setElem(elem)

	def get_vertical_aperture(self):
		return self.getElem("vertical_aperture")

	def set_vertical_aperture(self, elem):
		return self.setElem(elem)

	def get_radius(self):
		return self.getElem("radius")

	def set_radius(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXfilter(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXfilter", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_status(self):
		return self.getElem("status")

	def set_status(self, elem):
		return self.setElem(elem)

	def get_position(self):
		return self.getElem("position")

	def set_position(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXpolarizer(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXpolarizer", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_efficiency(self):
		return self.getElem("efficiency")

	def set_efficiency(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_composition(self):
		return self.getElem("composition")

	def set_composition(self, elem):
		return self.setElem(elem)

	def get_reflection(self):
		return self.getElem("reflection")

	def set_reflection(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXflipper(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXflipper", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_guide_turns(self):
		return self.getElem("guide_turns")

	def set_guide_turns(self, elem):
		return self.setElem(elem)

	def get_comp_current(self):
		return self.getElem("comp_current")

	def set_comp_current(self, elem):
		return self.setElem(elem)

	def get_guide_current(self):
		return self.getElem("guide_current")

	def set_guide_current(self, elem):
		return self.setElem(elem)

	def get_flip_turns(self):
		return self.getElem("flip_turns")

	def set_flip_turns(self, elem):
		return self.setElem(elem)

	def get_thickness(self):
		return self.getElem("thickness")

	def set_thickness(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_comp_turns(self):
		return self.getElem("comp_turns")

	def set_comp_turns(self, elem):
		return self.setElem(elem)

	def get_flip_current(self):
		return self.getElem("flip_current")

	def set_flip_current(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXmirror(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXmirror", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXdetector(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXdetector", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def getNXnote(self, name):
		return NXgroupbase.getGroup(self, name, "NXnote")

	def readNXnote(self, name, file):
		subgroupid = name+":"+"NXnote"
		return self.readSubGroup(subgroupid, file)

	def getNXdata(self, name):
		return NXgroupbase.getGroup(self, name, "NXdata")

	def readNXdata(self, name, file):
		subgroupid = name+":"+"NXdata"
		return self.readSubGroup(subgroupid, file)

	def getNXgeometry(self, name):
		return NXgroupbase.getGroup(self, name, "NXgeometry")

	def readNXgeometry(self, name, file):
		subgroupid = name+":"+"NXgeometry"
		return self.readSubGroup(subgroupid, file)

	def get_azimuthal_angle(self):
		return self.getElem("azimuthal_angle")

	def set_azimuthal_angle(self, elem):
		return self.setElem(elem)

	def get_distance(self):
		return self.getElem("distance")

	def set_distance(self, elem):
		return self.setElem(elem)

	def get_solid_angle(self):
		return self.getElem("solid_angle")

	def set_solid_angle(self, elem):
		return self.setElem(elem)

	def get_pixel_raster(self):
		return self.getElem("pixel_raster")

	def set_pixel_raster(self, elem):
		return self.setElem(elem)

	def get_description(self):
		return self.getElem("description")

	def set_description(self, elem):
		return self.setElem(elem)

	def get_slot(self):
		return self.getElem("slot")

	def set_slot(self, elem):
		return self.setElem(elem)

	def get_detection_gas_path(self):
		return self.getElem("detection_gas_path")

	def set_detection_gas_path(self, elem):
		return self.setElem(elem)

	def get_input(self):
		return self.getElem("input")

	def set_input(self, elem):
		return self.setElem(elem)

	def get_dead_time(self):
		return self.getElem("dead_time")

	def set_dead_time(self, elem):
		return self.setElem(elem)

	def get_crate(self):
		return self.getElem("crate")

	def set_crate(self, elem):
		return self.setElem(elem)

	def get_pixel_centre(self):
		return self.getElem("pixel_centre")

	def set_pixel_centre(self, elem):
		return self.setElem(elem)

	def get_time_of_flight(self):
		return self.getElem("time_of_flight")

	def set_time_of_flight(self, elem):
		return self.setElem(elem)

	def get_polar_angle(self):
		return self.getElem("polar_angle")

	def set_polar_angle(self, elem):
		return self.setElem(elem)

	def get_hold_off(self):
		return self.getElem("hold_off")

	def set_hold_off(self, elem):
		return self.setElem(elem)

	def get_translation(self):
		return self.getElem("translation")

	def set_translation(self, elem):
		return self.setElem(elem)

	def get_calibration_date(self):
		return self.getElem("calibration_date")

	def set_calibration_date(self, elem):
		return self.setElem(elem)

	def get_type(self):
		return self.getElem("type")

	def set_type(self, elem):
		return self.setElem(elem)

	def get_id(self):
		return self.getElem("id")

	def set_id(self, elem):
		return self.setElem(elem)

	def get_pixel_size(self):
		return self.getElem("pixel_size")

	def set_pixel_size(self, elem):
		return self.setElem(elem)

	def get_gas_pressure(self):
		return self.getElem("gas_pressure")

	def set_gas_pressure(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)




class NXbeamstop(NXgroupbase):
	""" auto-generated by metaDTD processor """

	def __init__(self, group=None, name="", nxclass="NXbeamstop", attrs=None, elems=None, groups=None, path=None, parent=None):
		NXgroupbase.__init__(self, group=group, name=name, nxclass=nxclass, attrs=attrs, elems=elems, groups=groups, path=path, parent=parent)

	def get_y(self):
		return self.getElem("y")

	def set_y(self, elem):
		return self.setElem(elem)

	def get_x(self):
		return self.getElem("x")

	def set_x(self, elem):
		return self.setElem(elem)

	def get_status(self):
		return self.getElem("status")

	def set_status(self, elem):
		return self.setElem(elem)

	def get_description(self):
		return self.getElem("description")

	def set_description(self, elem):
		return self.setElem(elem)

	def get_size(self):
		return self.getElem("size")

	def set_size(self, elem):
		return self.setElem(elem)

	def getattr_name(self):
		return self.getAttr("name")

	def setattr_name(self, elem):
		return self.setAttr(elem)

